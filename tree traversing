#include <stdio.h>
#include <stdlib.h>

struct node{
    int item;
    struct node* left;
    struct node* right;
};
struct node* createNode(int value)
{
    struct node* newNode = malloc(sizeof(struct node));
    newNode -> item = value;
    newNode -> left = NULL;
    newNode -> right = NULL;
    return newNode;
}
struct node* insertleft(struct node* root, int value) {
    root -> left = createNode(value);
    return root -> left;
}
struct node* insertright(struct node* root, int value) {
    root -> right = createNode(value);
    return root -> right;
}
void inorder_traversal(struct node* root){
    if(root != NULL){
        inorder_traversal(root->left);
        printf(" %d ", root->item);
        inorder_traversal(root->right);
    }
}
void preorder_traversal(struct node* root){
    if(root != NULL){
        printf(" %d ", root->item);
        preorder_traversal(root->left);
        preorder_traversal(root->right);
    }
}
void postorder_traversal(struct node* root){
    if(root != NULL){
        postorder_traversal(root->left);
        postorder_traversal(root->right);
        printf(" %d ", root->item);
    }
}
int main() {
    struct node* root = createNode(1);
    insertleft(root, 2);
    insertright(root, 3);
    insertleft(root -> left, 4);
    
    printf("Inorder Traversal");
    printf("\n");
    inorder_traversal(root);
    printf("\n");
    
    printf("Preorder Traversal");
    printf("\n");
    preorder_traversal(root);
    printf("\n");
    
    printf("Postorder Traversal");
    printf("\n");
    postorder_traversal(root);
    
    
    return 0;
}
